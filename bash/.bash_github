#!/bin/bash
# Github interactions
GITHUB_TOKEN="$(grep -oP 'token = \K(.*)'  ~/.config/git/config)"
GITHUB_TOKEN2="$(grep -oP 'token = \K(.*)'  ~/.config/git/config)"
GITHUB_API_URL="https://api.github.com"
GITHUB_PROFILE="Phaze228"

function ghrepos () {
    local USER_REPO=$1
    [ -z "$USER_REPO" ] && USER_REPO=$GITHUB_PROFILE

    local URL="$GITHUB_API_URL/search/repositories?q=user:$USER_REPO"
    local AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN"
    curl -L \
	-H "${AUTH_HEADER}" \
	-H "Accept: application/vnd.github+json" \
	"${URL}" | jq '. as $data | {
	    total_count: $data.total_count,
	    repos: [($data.items[] | {name, html_url, ssh_url, description})]
	}' 
}

function ghmake () {
    local USAGE="USAGE: ghmake <Repo Name: String> <Private: Bool> <Description: String>"
    local USER_REPO=$1
    local PRIVATE=$2
    local DESC=$3
    [ -z "$USER_REPO" ] && echo "${USAGE}" && return 1
    [ -z "$PRIVATE" ] && PRIVATE="true"
    [ -z "$DESC" ] && DESC='Please update this project description....'

    local PAYLOAD=$(jq -n \
		--arg name "$USER_REPO" \
		--arg desc "$DESC" \
		--argjson private "$PRIVATE" \
		'{name: $name, description: $desc, private: $private}')
    echo $PAYLOAD

    local URL="$GITHUB_API_URL/user/repos"
    local AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN2"

    IFS=$'\n' read -d "" response status_code < <(curl -L \
	-X POST \
	-w "%{http_code}" \
	-H "${AUTH_HEADER}" \
	-H "Accept: application/vnd.github+json" \
	-H "Content-Type: application/json" \
	"${URL}" \
	-d "$PAYLOAD" | jq -c)

    unset IFS

    if [[ "$status_code" != "201" ]]; then
	echo "Failed respository creation: $status_code"
	echo "-----"
	echo "[ERROR]: $(echo "$response" | jq -r '.message' 2>/dev/null)" 
    else
	echo "[SUCCESS] Posted repository: $GITHUB_PROFILE/$USER_REPO"
	echo "${response}" | jq '. | {name, html_url, ssh_url}'
    fi
}



function ghdelete () {
    local USER_REPO=$1
    local USAGE="USAGE: ghdelete <Repo Name: String>"
    [ -z "$USER_REPO" ] && echo "${USAGE}" && return 1


    local URL="$GITHUB_API_URL/repos/${GITHUB_PROFILE}/${USER_REPO}"
    local AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN2"

    IFS=$'\n' read -d "" status_code < <(curl -L \
	-X DELETE \
	-w "%{http_code}" \
	-H "${AUTH_HEADER}" \
	-H "Accept: application/vnd.github+json" \
	-H "Content-Type: application/json" \
	"${URL}" | jq -c )

    unset IFS
    echo $status_code

    if [[ "$status_code" != "204" ]]; then
	echo "Failed to delete repository: $status_code"
	echo "-----"
	echo "[ERROR]: $(echo "$status_code" | jq -r '.message' 2>/dev/null)" 
    else
	echo "[SUCCESS] Deleted repository: $GITHUB_PROFILE/$USER_REPO"
    fi
}


function ghupdate () {
    local USER_REPO=$1
    local ACTION=$2
    local V1=$3
    local USAGE="Updates github repos:
    ghupdate <repo> name <new_repo_name>
    ghupdate <repo> desc <new_desc>"
    [ -z "$USER_REPO" ] && (echo "$USAGE" || return 1)
    [ -z "$ACTION" ] || ([ "$ACTION" != "name" ] && [ "$ACTION" != "desc" ]) && (echo "$USAGE" || return 1)
    [ -z "$V1" ] && (echo "$USAGE" || return 1)
    [ "$ACTION" = "desc" ] && ACTION="description"

    local URL="$GITHUB_API_URL/repos/${GITHUB_PROFILE}/${USER_REPO}"
    local AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN2"
    
    
    
    local PAYLOAD=$(jq -n \
		--arg action "$ACTION" \
		--arg content "$V1" \
		'{ $action: $content }')

    echo "$PAYLOAD"

    IFS=$'\n' read -d "" response status_code < <(curl -L \
	-X PATCH \
	-w "%{http_code}" \
	-H "${AUTH_HEADER}" \
	-H "Accept: application/vnd.github+json" \
	-H "Content-Type: application/json" \
	"${URL}" \
	-d "$PAYLOAD" | jq -c )

    unset IFS
    echo $status_code

    if [[ "$status_code" != "200" ]]; then
	echo "Failed to update repository: $status_code"
	echo "-----"
	echo "[ERROR]: $(echo "$status_code" | jq -r '.message' 2>/dev/null)" 
    else
	echo "[SUCCESS] Updated repository: $GITHUB_PROFILE/$USER_REPO"
    fi
}


